---

# The following tasks check the initialization status of the Vault
# service and performs an unseal if needed. The unseal keys and initial
# root token are written to Consul.

- name: Wait until a Consul leader is elected
  uri:
    return_content: yes
    url: http://127.0.0.1:8500/v1/status/leader
  register: response
  retries: 10
  until: response.json is defined and response.json != ""

- name: Check initialization status of Vault
  uri:
    return_content: yes
    url: http://127.0.0.1:8200/v1/sys/init
  register: response

- name: Initialize Vault
  uri:
    body: >
      {
        "secret_shares": 5,
        "secret_threshold": 3
      }
    body_format: json
    method: PUT
    return_content: yes
    url: http://127.0.0.1:8200/v1/sys/init
  register: response
  when: response is defined and not response.json.initialized

- name: Write Unseal Keys to path in key-value store
  consul_kv:
    key: bootstrap/vault/unseal-key-{{ item.0 }}
    state: present
    value: "{{ item.1 }}"
  with_indexed_items: "{{ response.json['keys'] }}"
  when: response.json is defined

- name: Write Initial Root Token to path in key-value store
  consul_kv:
    key: bootstrap/vault/initial-root-token
    state: present
    value: "{{ response.json.root_token }}"
  when: response.json is defined

- name: Check seal status of Vault
  uri:
    return_content: yes
    url: http://127.0.0.1:8200/v1/sys/seal-status
  ignore_errors: yes
  register: response

- name: Unseal Vault
  uri:
    body: >
      {
        "key": "{{ item }}"
      }
    body_format: json
    method: PUT
    url: http://127.0.0.1:8200/v1/sys/unseal
  when: response.json is defined and response.json.sealed
  with_consul_kv:
  - bootstrap/vault/unseal-key-0
  - bootstrap/vault/unseal-key-1
  - bootstrap/vault/unseal-key-2

- set_fact:
    root_token: "{{ lookup('consul_kv', 'bootstrap/vault/initial-root-token') }}"
